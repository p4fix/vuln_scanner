{"ast":null,"code":"import axios from 'axios';\nclass ApiService {\n  constructor(config) {\n    this.api = void 0;\n    this.config = void 0;\n    this.config = config;\n    this.api = axios.create({\n      baseURL: config.baseURL,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-API-Key': config.apiKey\n      },\n      timeout: 30000 // 30 seconds\n    });\n\n    // Add response interceptor for error handling\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response, _error$response2, _error$response3;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        throw new Error('Invalid API key. Please check your configuration.');\n      } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 429) {\n        throw new Error('Rate limit exceeded. Please try again later.');\n      } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 400) {\n        var _error$response$data;\n        throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Invalid request data.');\n      } else if (error.code === 'ECONNABORTED') {\n        throw new Error('Request timeout. Please try again.');\n      } else if (error.code === 'ERR_NETWORK') {\n        throw new Error('Network error. Please check your connection and API server.');\n      } else {\n        var _error$response4, _error$response4$data;\n        throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'An unexpected error occurred.');\n      }\n    });\n  }\n  async checkWebsite(url) {\n    try {\n      const response = await this.api.post('/check_website', {\n        url\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  async checkPort(host, port) {\n    try {\n      const response = await this.api.post('/check_port', {\n        host,\n        port\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  async bannerGrab(host, port) {\n    try {\n      const response = await this.api.post('/banner_grab', {\n        host,\n        port\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  async getHealth() {\n    try {\n      const response = await this.api.get('/health');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  updateConfig(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig\n    };\n    this.api.defaults.headers['X-API-Key'] = this.config.apiKey;\n    if (newConfig.baseURL) {\n      this.api.defaults.baseURL = newConfig.baseURL;\n    }\n  }\n  getConfig() {\n    return {\n      ...this.config\n    };\n  }\n}\nexport default ApiService;","map":{"version":3,"names":["axios","ApiService","constructor","config","api","create","baseURL","headers","apiKey","timeout","interceptors","response","use","error","_error$response","_error$response2","_error$response3","status","Error","_error$response$data","data","code","_error$response4","_error$response4$data","checkWebsite","url","post","checkPort","host","port","bannerGrab","getHealth","get","updateConfig","newConfig","defaults","getConfig"],"sources":["C:/Users/ixacg/Documents/PYTHON/Vuln Scanner/vuln-scanner-frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\r\nimport { WebsiteCheckResult, PortCheckResult, BannerGrabResult, ApiConfig } from '../types';\r\n\r\nclass ApiService {\r\n  private api: AxiosInstance;\r\n  private config: ApiConfig;\r\n\r\n  constructor(config: ApiConfig) {\r\n    this.config = config;\r\n    this.api = axios.create({\r\n      baseURL: config.baseURL,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-API-Key': config.apiKey,\r\n      },\r\n      timeout: 30000, // 30 seconds\r\n    });\r\n\r\n    // Add response interceptor for error handling\r\n    this.api.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        if (error.response?.status === 401) {\r\n          throw new Error('Invalid API key. Please check your configuration.');\r\n        } else if (error.response?.status === 429) {\r\n          throw new Error('Rate limit exceeded. Please try again later.');\r\n        } else if (error.response?.status === 400) {\r\n          throw new Error(error.response.data?.error || 'Invalid request data.');\r\n        } else if (error.code === 'ECONNABORTED') {\r\n          throw new Error('Request timeout. Please try again.');\r\n        } else if (error.code === 'ERR_NETWORK') {\r\n          throw new Error('Network error. Please check your connection and API server.');\r\n        } else {\r\n          throw new Error(error.response?.data?.error || 'An unexpected error occurred.');\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  async checkWebsite(url: string): Promise<WebsiteCheckResult> {\r\n    try {\r\n      const response = await this.api.post('/check_website', { url });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async checkPort(host: string, port: number): Promise<PortCheckResult> {\r\n    try {\r\n      const response = await this.api.post('/check_port', { host, port });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async bannerGrab(host: string, port: number): Promise<BannerGrabResult> {\r\n    try {\r\n      const response = await this.api.post('/banner_grab', { host, port });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getHealth(): Promise<{ status: string; timestamp: string }> {\r\n    try {\r\n      const response = await this.api.get('/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  updateConfig(newConfig: Partial<ApiConfig>) {\r\n    this.config = { ...this.config, ...newConfig };\r\n    this.api.defaults.headers['X-API-Key'] = this.config.apiKey;\r\n    if (newConfig.baseURL) {\r\n      this.api.defaults.baseURL = newConfig.baseURL;\r\n    }\r\n  }\r\n\r\n  getConfig(): ApiConfig {\r\n    return { ...this.config };\r\n  }\r\n}\r\n\r\nexport default ApiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}